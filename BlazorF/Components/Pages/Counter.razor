@page "/counter"
@using BlazorF.ApiFilm.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<!-- Ваш существующий HTML код остается без изменений -->

@code {
    private User loginUser = new User();

    // Создаем класс для десериализации ответа от API
    public class AuthResponse
    {
        public string Token { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            if (string.IsNullOrEmpty(loginUser.Email) || string.IsNullOrEmpty(loginUser.Password))
            {
                await ShowAlert("Пожалуйста, введите email и пароль.");
                return;
            }

            var loginRequest = new LoginRequest
                {
                    Email = loginUser.Email,
                    Password = loginUser.Password
                };

            var response = await Http.PostAsJsonAsync("api/User/authentication", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                // Десериализуем ответ с токеном
                var authResult = await response.Content.ReadFromJsonAsync<AuthResponse>();

                if (!string.IsNullOrEmpty(authResult?.Token))
                {
                    // Сохраняем токен
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", authResult.Token);

                    // Уведомляем систему аутентификации об изменении состояния
                    ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(authResult.Token);

                    // Перенаправляем на защищенную страницу
                    NavigationManager.NavigateTo("/profile");
                }
                else
                {
                    await ShowAlert("Ошибка: не удалось получить токен авторизации.");
                }
            }
            else
            {
                await ShowAlert("Неверный email или пароль!");
            }
        }
        catch (Exception ex)
        {
            await ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}